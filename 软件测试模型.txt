随着软件工程学科的发展,人们对软件的认识逐渐深入,软件工作的范围不仅仅局限在程序编写,而是扩展到了整个软件生命周期,如软件基本概念的形成,需求分析,设计,实现,测试,安装部署,运行维护,直到软件被更新为新的版本

在说软件测试模型之前先来说一说软件的生命周期

软件的生命周期分为6个阶段:需求分析--计划--设计--编码--测试--运行维护

 测试模型
1. 瀑布模型(Waterfall Model)
过程:



瀑布模型在软件工程中占有重要地位,是所有其他模型的基础框架,瀑布模型的每一阶段都只执行一次,因此是线性顺序进行的软件开发模式

优点:

强调开发的阶段性
强调早期计划及需求调查
强调产品测试
缺点:

依赖于早期进行的唯一一次需求调查，不能适应需求的变化
由于是单一流程，开发中的经验教训不能反馈应用于本产品的过程
风险往往迟至后期的测试阶段才显露，因而失去及早纠正的机会
适用性:

适用于需求变化较小,需求不易变动,需求稳定,风险小的项目 

在瀑布模型中,测试阶段处于软件实现后,这意味着必须在代码完成后有足够的时间预留给测试活动,否则将会导致测试不充分,从而把缺陷直接遗留给用户

2. 螺旋模型(Spiral Model)
螺旋模型一般在开发前期需求不是很明确时,采用渐进式的开发模式,螺旋模型是渐进式开发模型的代表之一

这种迭代开发模式给软件测试带来了新的要求,它不允许有一段独立的测试时间和阶段,测试必须跟随开发的迭代而迭代,因此回归测试的重要性就不言而喻了

图解:

                                                      

 

优点:

强调严格的全过程风险管理
强调各开发阶段的质量
提供机会检讨项目是否有价值继续下去
缺点:

引入非常严格的风险识别,风险分析和风险控制,这对风险管理的技能水平提出了很高的要求,这需要人员,资金和时间的投入
适用性:

适用于需求变动比较大,规模庞大,复杂度高,风险大的项目

3. 增量迭代模型
增量开发能明显降低项目风险,结合软件持续构建机制,构成了当今流行的软件工程最佳实践之一,增量开发模型,鼓励用户反馈,在每个迭代过程中,促使开发小组以一种循环的,可预测的方式驱动产品的开发,因此,在这种开发模式下,每一次迭代都意味着可能有需求的更改,构建出新的可执行版本,意味着测试需要频繁进行,测试人员需要与开发人员更加紧密的协作

增量通常和迭代混为一谈,其实它们是有区别的,增量是逐块建造的概念,例如一幅人物画,我们可以先画人物的头部,再画身体,再画手脚.....而迭代是反复求精的概念,同样是画人物,我们可以先画整体轮廓,再勾勒出基本雏形,再细化,着色.....

4. 敏捷
敏捷的价值观:

在每对对比中,后者并非全无价值,但我们更看重前者 

个体与交互重于过程和工具(重交流)
可用的软件重于完备的文档(轻文档)
客户协作重于合同谈判(要求客户全程参与)
响应变化重于遵循计划(拥抱变化)
敏捷的贡献在于它更多地思考了如何去激发开发人员的工作热情,这是在软件工程几十年发展过程中相对被忽略的领域

敏捷开发由很多中方式,其中scrum是比较流行的一种

scrum

scrum里面的角色

scrum由product owner(产品经理),scrum master(项目经理)和team(研发团队)组成

其中product  owner负责整理 user story(用户故事),定义其商业价值,对其进行排序,制定发布计划,对产品负责
scrum master负责召开各种会议,协调项目,为研发团队服务
研发团队则由不同技能的成员组成,通过紧密协同,完成每一次迭代的目标,交付产品
迭代开发

与瀑布不同,scrum将产品的开发分解为若干个小sprint(迭代),其周期从1到4周不等,但不会超过4周,参与的团队成员一般是5-9人,每期迭代要完成的user story是固定的,每次迭代都会产生一定的交付,每天的晨例会不会超过15分钟

scrum的基本流程:

    

产品负责人负责整理user story,形成左侧的product backlog
发布计划会议:product owner负责讲解user story,对其进行估算和排序,发布计划会议的产出就是制定出这一期迭代要完成的story列表,sprint backlog
迭代计划会议:项目团队对每一个story进行任务分解,分解的标准是完成该story的所有任务,每个任务都有明确的负责人,并完成公时的初估计
每日列会:每天scrum master 要召集站立会议,团队成员回答昨天做了什么,今天计划做什么,由什么问题
演示会议:迭代结束之后,召开演示会议,相关人员受邀参加,团队负责向大家展示本次迭代取得的成果,期间记录大家的反馈,形成新的story
回顾会议:项目团队对本期迭代进行总结,发现不足,制定改进计划,下一次迭代继续改进,以达到持续改进的效果
5. V模型


V模型最早是由Paul Rook在20世纪80年代后期提出的，目的是改进软件开发的效率和效果。是瀑布模型的变种

明确的标注了测试过程中存在的不同类型的测试，并且清楚的描述了这些测试阶段和开发过程期间各阶段的对应关系
V模型指出，单元和集成测试应检测程序的执行是否满足软件设计的要求；系统测试应检测系统功能、性能的质量特性是否达到系统要求的指标；验收测试确定软件的实现是否满足用户需要或合同的要求
局限性:仅仅把测试作为在编码之后的一个阶段，未在需求阶段就进入测试 
6. W模型


W模型又叫双V模型,是为了解决测试介入比较晚的问题而设计的,早发现问题,减少修改成本,是研发线和测试线并行,是一个串型模型

W模型增加了软件各开发阶段中应同步进行的验证和确认活动。W模型由两个V字型模型组成，分别代表测试与开发过程，图中明确表示出了测试与开发的并行关系。


W模型特点：测试的对象不仅是程序，需求、设计等同样要测试，测试与开发是同步进行的


W模型优点：有利于尽早地全面的发现问题。例如，需求分析完成后，测试人员就应该参与到对需求的验证和确认活动中，以尽早地找出缺陷所在。同时，对需求的测试也有利于及时了解项目难度和测试风险，及早制定应对措施，显著减少总体测试时间，加快项目进度。


局限性：需求、设计、编码等活动被视为串行的；测试和开发活动也保持着一种线性的前后关系，上一阶段
完全结束，才可正式开始下一个阶段工作。无法支持敏捷开发模式。对于当前软件开发复杂多变的情况，W模型并不能解除测试管理面临着困惑 
